'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatSize = formatSize;
exports.isFileList = isFileList;

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var ACCEPT_SEP_REG = /\s*,\s*/;
var ESCAPE_REG = /([.+?^=!:${}()|[\]\/\\])/g; // Removed star char

var ANY_REG = /\*/g;
var file = (0, _helpers.memoize)(function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      message = _ref.message,
      msg = _ref.msg,
      accept = _ref.accept,
      minSize = _ref.minSize,
      maxSize = _ref.maxSize,
      minFiles = _ref.minFiles,
      maxFiles = _ref.maxFiles,
      ifCond = _ref.if,
      unless = _ref.unless,
      allowBlank = _ref.allowBlank;

  msg = msg || message;
  minFiles = (0, _helpers.selectNum)(minFiles);
  maxFiles = (0, _helpers.selectNum)(maxFiles);

  if (maxFiles < 0) {
    maxFiles = null;
  }

  if (null === minFiles) {
    minFiles = 1;
  }

  if ('string' === typeof accept && accept.trim()) {
    accept = accept.trim().toLowerCase().split(ACCEPT_SEP_REG).map(function (type) {
      return '.' === type.charAt(0) || type.indexOf('*') < 0 ? type : new RegExp('^' + type.replace(ESCAPE_REG, '\\$1').replace(ANY_REG, '.*') + '$', 'i');
    });
  } else {
    accept = null;
  }

  var min = null != minSize ? sizeToInt(minSize) : null;
  var max = null != maxSize ? sizeToInt(maxSize) : null;
  return (0, _helpers.prepare)(ifCond, unless, false, function (value) {
    var isAFileList = isFileList(value); // special blank check

    if ((null != allowBlank ? allowBlank : _index2.default.defaultOptions.allowBlank) && isAFileList && 0 === value.length) {
      return;
    }

    if (!isAFileList) {
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'file'));
    }

    if (isNaN(value.length)) {
      value = [value];
    }

    if (value.length < minFiles) {
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'fileTooFew', {
        count: minFiles
      }));
    }

    if (null !== maxFiles && value.length > maxFiles) {
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'fileTooMany', {
        count: maxFiles
      }));
    }

    var acceptError = [];
    var tooSmallError = [];
    var tooBigError = [];

    var _loop = function _loop(i, len, _val, _ftype, _fext) {
      _val = value[i];

      if (accept) {
        _ftype = _val.type || '';
        _fext = fileExt(_val.name || '');

        if (!accept.some(function (type) {
          return 'string' === typeof type ? type === ('.' === type.charAt(0) ? _fext : _ftype) : type.test(_ftype);
        })) {
          acceptError.push(_val);
        }
      }

      if (null != min && _val.size < min) {
        tooSmallError.push(_val);
      }

      if (null != max && _val.size > max) {
        tooBigError.push(_val);
      }

      val = _val;
      ftype = _ftype;
      fext = _fext;
    };

    for (var i = 0, len = value.length, val, ftype, fext; i < len; ++i) {
      _loop(i, len, val, ftype, fext);
    }

    if (acceptError.length) {
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'fileAccept', {
        files: acceptError,
        count: acceptError.length
      }));
    }

    if (tooSmallError.length) {
      var pair = parse(minSize);
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'fileTooSmall', {
        files: tooSmallError,
        count: tooSmallError.length,
        size: _index2.default.formatSize(pair[1], pair[2] || 'B')
      }));
    }

    if (tooBigError.length) {
      var _pair = parse(maxSize);

      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'fileTooBig', {
        files: tooBigError,
        count: tooBigError.length,
        size: _index2.default.formatSize(_pair[1], _pair[2] || 'B')
      }));
    }
  });
});
exports.default = file;

function formatSize(size, unit) {
  return size + ' ' + unit;
}

function isFileList(value) {
  if ('undefined' !== typeof FileList && value instanceof FileList || 'undefined' !== typeof File && (value instanceof File || value[0] instanceof File)) {
    return true;
  }

  var str = _helpers.TO_STRING.call(value);

  return '[object FileList]' === str || '[object File]' === str || '[object File]' === _helpers.TO_STRING.call(value[0]);
} // private


var SIZE_REG = /^([\d\.]+)\s*([KMGTPE]?B)?$/;
var SIZE_UNITS = {
  B: 1,
  KB: 1024,
  MB: 1048576,
  GB: 1073741824,
  TB: 1099511627776,
  PB: 1125899906842624,
  EB: 1152921504606847000
};

function parse(size) {
  return SIZE_REG.exec(('' + size).trim());
}

function sizeToInt(size) {
  var pair = parse(size);
  return pair ? pair[1] * (SIZE_UNITS[pair[2]] || 1) : null;
}

function fileExt(filename) {
  return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 1).toLowerCase();
}