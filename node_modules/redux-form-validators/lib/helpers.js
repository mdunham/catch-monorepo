'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_OPTIONS = exports.TO_STRING = exports.HAS_PROP = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

exports.regFormat = regFormat;
exports.prepare = prepare;
exports.trunc = trunc;
exports.selectNum = selectNum;
exports.isNumber = isNumber;
exports.formatMsg = formatMsg;
exports.prepareMsg = prepareMsg;
exports.toObjectMsg = toObjectMsg;
exports.memoize = memoize;

var _format = require('./format');

var _format2 = _interopRequireDefault(_format);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var HAS_PROP = exports.HAS_PROP = {}.hasOwnProperty;
var TO_STRING = exports.TO_STRING = {}.toString;
var DEFAULT_OPTIONS = exports.DEFAULT_OPTIONS = {
  allowBlank: false,
  urlProtocols: ['http', 'https'],
  dateFormat: 'yyyy-mm-dd',
  // ISO
  dateYmd: 'ymd',
  accept: ['1', 'true'],
  caseSensitive: true // confirmation, inclusion, exclusion

};

function regFormat(func, messageType) {
  return memoize(function (options) {
    options = options || {};
    var msg = options.msg || options.message;
    return prepare(options['if'], options.unless, options.allowBlank, function (value) {
      if (!value.match(func(options))) {
        return _index2.default.formatMessage(prepareMsg(msg, messageType));
      }
    });
  });
}

function prepare(ifCond, unlessCond, allowBlank, func) {
  return function (value) {
    var allValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!value || 'object' !== (typeof value === 'undefined' ? 'undefined' : _typeof(value))) {
      value = null == value ? '' : '' + value;

      if ((null != allowBlank ? allowBlank : _index2.default.defaultOptions.allowBlank) && !value.trim()) {
        return;
      }
    }

    if (('function' !== typeof ifCond || ifCond(allValues, value)) && ('function' !== typeof unlessCond || !unlessCond(allValues, value))) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      return func.apply(undefined, [value, allValues].concat(args));
    }
  };
}

function trunc(num) {
  /* istanbul ignore next */
  return Math.trunc ? Math.trunc(num) : num < 0 ? Math.ceil(num) : Math.floor(num);
}

function selectNum(var1, var2) {
  return isNumber(var1) ? +var1 : arguments.length > 1 && isNumber(var2) ? +var2 : null;
}

function isNumber(num) {
  return !isNaN(num) && (0 != num || '' !== ('' + num).trim());
}

function formatMsg(msg) {
  if (msg.props) {
    msg = msg.props;
  }

  var text = msg.defaultMessage || msg.id || '';
  var rules = _index2.default.pluralRules;
  return !msg.values ? text : parseMsg(text, function (part) {
    var parts = part.split(',');
    var count = msg.values[parts[0]]; // {value} OR {count, number}

    if (parts.length <= 2) {
      return null == count ? '' : '' + count;
    } // plural


    var plural = parts.slice(2).join(',').trim();
    var info = {};
    var result = parseMsg(plural, null, rules[+count] || 'other', info);
    return info.found ? result : parseMsg(plural, null, 'other', {});
  });
}

function prepareMsg(msg, type, values) {
  if (null == msg) {
    return defaultMessage(type, values);
  }

  if (HAS_PROP.call(msg, 'props') && isReactElement(msg)) {
    msg = msg.props;
  }

  if (null != msg[type]) {
    msg = msg[type];
  }

  if (isObject(msg)) {
    if (HAS_PROP.call(msg, 'id') || HAS_PROP.call(msg, 'defaultMessage')) {
      return Object.assign({}, msg, {
        values: values
      });
    }

    return defaultMessage(type, values);
  }

  return {
    id: msg,
    defaultMessage: msg,
    values: values
  };
}

function toObjectMsg(msg) {
  if (null == msg) return null;
  return isObject(msg) ? msg : {
    id: msg,
    defaultMessage: msg
  };
}

function memoize(func) {
  if (!func.cache) {
    func.cache = {};
  }

  return function (options) {
    var key = stringify(options);
    return HAS_PROP.call(func.cache, key) ? func.cache[key] : func.cache[key] = func(options);
  };
} // private


function defaultMessage(type, values) {
  var msg = _index2.default.messages[type];
  return 'string' === typeof msg ? {
    defaultMessage: msg,
    values: values
  } : Object.assign({}, msg, {
    values: values
  });
}

function parseMsg(msg, func, pattern, info) {
  var start = msg.indexOf('{');
  if (start < 0) return pattern ? '' : msg;
  var index = start;
  var count = 1;
  var len = msg.length;

  while (count > 0 && index < len) {
    ++index;

    if ('{' === msg.charAt(index)) {
      ++count;
    }

    if ('}' === msg.charAt(index)) {
      --count;
    }
  }

  if (pattern) {
    if (pattern === msg.slice(0, start).trim()) {
      info.found = true;
      return msg.slice(start + 1, index).trim();
    }

    return parseMsg(msg.slice(index + 1), null, pattern, info);
  } // func gets all '{.*}' parts
  // e.g:
  // - {count}
  // - {count, plural, one {1 thing} other {many things}}
  // - ...


  return msg.slice(0, start) + parseMsg(func(msg.slice(start + 1, index).trim()), func) + parseMsg(msg.slice(index + 1), func);
}

function stringify(options) {
  var arr = [];
  var value = void 0;

  for (var k in options) {
    if (HAS_PROP.call(options, k)) {
      value = options[k];
      arr.push(k, isReactElement(value) ? stringify(value.props) : isObject(value) ? stringify(value) : value.toString());
    }
  }

  return JSON.stringify(arr);
}

function isReactElement(object) {
  return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && '$$typeof' in object;
}

function isObject(obj) {
  return 'object' === (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) && '[object Object]' === TO_STRING.call(obj) && null !== obj;
}