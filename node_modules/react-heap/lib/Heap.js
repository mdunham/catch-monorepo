'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeapAPI = undefined;

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var HeapAPI = exports.HeapAPI = function HeapAPI() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (canUseDOM && window.heap) {
    window.heap.apply(null, args);
  } else {
    console.warn('Heap not initialized yet');
  }
};

var injectScript = function injectScript(appId) {
  if (!canUseDOM) {
    return;
  }

  (function (window, document, appId) {
    window.heap = window.heap || [], heap.load = function (e, t) {
      window.heap.appid = e, window.heap.config = t = t || {};
      var r = t.forceSSL || "https:" === document.location.protocol,
          a = document.createElement("script");
      a.type = "text/javascript", a.async = !0, a.src = (r ? "https:" : "http:") + "//cdn.heapanalytics.com/js/heap-" + e + ".js";
      var n = document.getElementsByTagName("script")[0];
      n.parentNode.insertBefore(a, n);

      for (var o = function o(e) {
        return function () {
          heap.push([e].concat(Array.prototype.slice.call(arguments, 0)));
        };
      }, p = ["addEventProperties", "addUserProperties", "clearEventProperties", "identify", "removeEventProperty", "setEventProperties", "track", "unsetEventProperty"], c = 0; c < p.length; c++) {
        heap[p[c]] = o(p[c]);
      }
    };
    heap.load(appId);
  })(window, document, appId);
};

var Heap = function (_React$Component) {
  _inherits(Heap, _React$Component);

  function Heap() {
    _classCallCheck(this, Heap);

    return _possibleConstructorReturn(this, (Heap.__proto__ || Object.getPrototypeOf(Heap)).apply(this, arguments));
  }

  _createClass(Heap, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      return false;
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (!canUseDOM) {
        return;
      }

      var _props = this.props,
          appId = _props.appId,
          userId = _props.userId,
          userData = _props.userData;

      if (!window.heap && appId) {
        injectScript(appId);

        if (window.heap) {
          if (userId) {
            window.heap.identify(userId);
          }

          if (userData) {
            window.heap.addUserProperties(userData);
          }
        }
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!canUseDOM) {
        return;
      }

      if (nextProps.userId !== this.props.userId) {
        window.heap.identify(nextProps.userId);
      }

      if (nextProps.userData !== this.props.userData) {
        window.heap.addUserProperties(nextProps.userData);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return Heap;
}(_react2.default.Component);

Heap.propTypes = {
  appId: _propTypes2.default.string.isRequired,
  userId: _propTypes2.default.string,
  userData: _propTypes2.default.shape({})
};
exports.default = Heap;